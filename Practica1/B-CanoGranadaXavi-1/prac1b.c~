/* CANO GRANADA XAVI 46793790Z */

#include<stdio.h>
#include<stdlib.h>
#include<math.h>

int resoltrisup(int n, double **A, double *b, double *x, double tol) {
    int j, k;
    double sum = 0;

    for (j = n - 1; j >= 0; j--) {

        for (k = j + 1; k < n; k++)
            sum = sum + (A[j][k] * x[k]);
        /*Casen que dividim per 0*/
        if (A[j][j] == 0) {
            return 1;
        }
        x[j] = (b[j] - sum) / A[j][j];
        /*Â¿Tolerancia? */
        if (fabs(x[j]) < tol) {
            x[j] = 0;
        }
        /*Reinicialitzo el sumatori*/
        sum = 0;
    }

    return 0;
}

int gausspivot(int n, double **A, double tol, double *v) {
    /*Comptadors*/
    int k, l, g, j;
    double *tmp, temp, Mul;
    tmp = (double *) malloc(n * sizeof ( double));

    /*Metode de Gauss*/
    for (k = 0; k < n; k++) {
        /* Pivotatge */
        for (g = k; g < n; g++) {
            if (fabs(A[g][k]) > fabs(A[k][k])) {
                tmp = A[g];
                A[g] = A[k];
                A[k] = tmp;
                temp = v[g];
                v[g] = v[k];
                v[k] = temp;
            }
        }
        if (fabs(A[k][k]) == 0) {
            return 1;
        }

        for (l = k + 1; l < n; l++) {
            Mul = -A[l][k] / A[k][k];
            /*Tolerancia*/
            if (fabs(Mul) < tol) {
                Mul = 0;
            }
            for (j = k; j < n; j++)
                A[l][j] += Mul * A[k][j];
            v[l] += Mul * v[k];
        }
    }

    return 0;
}

int main(void) {

    double **A = NULL,**AA = NULL, *x = NULL, *b = NULL,*bb = NULL, tol, *fila;
    int n, i, j;
    int f = 0, c = 0;
    fila = 0;


    printf("Numero de files y columnes de la matriu ? \n");
    scanf("%d", &n);


    A = (double **) malloc(n * sizeof (double *));
    AA = (double **) malloc(n * sizeof (double *));

    for (f = 0; f < n; f++) {
        A[f] = (double *) malloc(n * sizeof (double));
        AA[f] = (double *) malloc(n * sizeof (double));
    }

    x = (double *) malloc(n * sizeof ( double));
    b = (double *) malloc(n * sizeof ( double));
    bb = (double *) malloc(n * sizeof ( double));
    fila = (double *) malloc(n * sizeof ( double));

    printf("Doneu els( %d x %d ) elements de la matriu A : \n", n, n);
    for (i = 0; i < n; i++) {
        for (j = 0; j < n; j++) {
            printf("A[%d][%d]:\n", i, j);
            scanf("%le", &A[i][j]);
        }
    }

    /*Imprimim la matriu*/
    printf("Matriu A:\n");
    for (f = 0; f < n; f++) {
        for (c = 0; c < n; c++)
            printf(" %16.7e ", A[f][c]);
        printf("\n");
    }
    printf("Doneu els %d elements del vector b : \n", n);
    for (i = 0; i < n; i++)
        scanf("%le", &b[i]);

    /*Tolerancia*/
    printf("Doneu una tolerancia per al zero : \n");
    scanf("%le", &tol);

    /*Faig una copia de A y b*/
    for (f = 0; f < n; f++) {
        bb[f]=b[f];
        for (c = 0; c < n; c++)
            AA[f][c]=A[f][c];
        printf("\n");
    }
    if (gausspivot(n, A, tol, b) == 0) {

        if (resoltrisup(n, AA, bb, x, tol) == 0) {

            printf("Les solucions del sistema son : \n");
            for (f = 0; f < n; f++)
                printf("x%d-->%16.7e\n", f,x[f]);

            /* Ax-b*/
            for (f = 0; f < n; f++) {
                for (c = 0; c < n; c++) {
                    fila[f] = fila[f] + A[f][c] * x[f];
                }
            }
        } else {
            printf("No es pot resoldre el sistema. \n");
        }
    } else {
        printf("ERROR!!!\n");
    }

    

    /*Lliberem la memoria*/
    for (f = 0; f < n; f++)
        free(A[f]);
    free(A);
    free(b);
    free(x);
    free(fila);
    return (0);

}